//-------------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by EntitiesToDTOs.v3.2 (entitiestodtos.codeplex.com).
//     Timestamp: 2015/01/18 - 22:07:31
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//-------------------------------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Text;
using System.Linq;
using OrderManagement.Web.Domain;
using OrderManagement.Web.Database;

namespace OrderManagement.Web.Domain
{

    /// <summary>
    /// Assembler for <see cref="tblAdminLogin"/> and <see cref="tblAdminLoginDTO"/>.
    /// </summary>
    public static partial class tblAdminLoginAssembler
    {
        /// <summary>
        /// Invoked when <see cref="ToDTO"/> operation is about to return.
        /// </summary>
        /// <param name="dto"><see cref="tblAdminLoginDTO"/> converted from <see cref="tblAdminLogin"/>.</param>
        static partial void OnDTO(this tblAdminLogin entity, tblAdminLoginDTO dto);

        /// <summary>
        /// Invoked when <see cref="ToEntity"/> operation is about to return.
        /// </summary>
        /// <param name="entity"><see cref="tblAdminLogin"/> converted from <see cref="tblAdminLoginDTO"/>.</param>
        static partial void OnEntity(this tblAdminLoginDTO dto, tblAdminLogin entity);

        /// <summary>
        /// Converts this instance of <see cref="tblAdminLoginDTO"/> to an instance of <see cref="tblAdminLogin"/>.
        /// </summary>
        /// <param name="dto"><see cref="tblAdminLoginDTO"/> to convert.</param>
        public static tblAdminLogin ToEntity(this tblAdminLoginDTO dto)
        {
            if (dto == null) return null;

            var entity = new tblAdminLogin();

            entity.AdminId = dto.AdminId;
            entity.FirstName = dto.FirstName;
            entity.LastName = dto.LastName;
            entity.UserName = dto.UserName;
            entity.Password = dto.Password;
            entity.RegisterDate = dto.RegisterDate;
            entity.IsActive = dto.IsActive;

            dto.OnEntity(entity);

            return entity;
        }

        /// <summary>
        /// Converts this instance of <see cref="tblAdminLogin"/> to an instance of <see cref="tblAdminLoginDTO"/>.
        /// </summary>
        /// <param name="entity"><see cref="tblAdminLogin"/> to convert.</param>
        public static tblAdminLoginDTO ToDTO(this tblAdminLogin entity)
        {
            if (entity == null) return null;

            var dto = new tblAdminLoginDTO();

            dto.AdminId = entity.AdminId;
            dto.FirstName = entity.FirstName;
            dto.LastName = entity.LastName;
            dto.UserName = entity.UserName;
            dto.Password = entity.Password;
            dto.RegisterDate = entity.RegisterDate;
            dto.IsActive = entity.IsActive;

            entity.OnDTO(dto);

            return dto;
        }

        /// <summary>
        /// Converts each instance of <see cref="tblAdminLoginDTO"/> to an instance of <see cref="tblAdminLogin"/>.
        /// </summary>
        /// <param name="dtos"></param>
        /// <returns></returns>
        public static List<tblAdminLogin> ToEntities(this IEnumerable<tblAdminLoginDTO> dtos)
        {
            if (dtos == null) return null;

            return dtos.Select(e => e.ToEntity()).ToList();
        }

        /// <summary>
        /// Converts each instance of <see cref="tblAdminLogin"/> to an instance of <see cref="tblAdminLoginDTO"/>.
        /// </summary>
        /// <param name="entities"></param>
        /// <returns></returns>
        public static List<tblAdminLoginDTO> ToDTOs(this IEnumerable<tblAdminLogin> entities)
        {
            if (entities == null) return null;

            return entities.Select(e => e.ToDTO()).ToList();
        }

    }
}
